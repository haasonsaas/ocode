name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - test

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      environment: ${{ steps.environment.outputs.environment }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine environment
        id: environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ steps.version.outputs.is_prerelease }}" == "true" ]]; then
            ENV="test"
          else
            ENV="production"
          fi

          echo "environment=${ENV}" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta|rc)\.[0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z or vX.Y.Z-(alpha|beta|rc).N"
            exit 1
          fi

  test:
    name: Test Before Release
    needs: [validate]
    uses: ./.github/workflows/ci.yml

  build:
    name: Build Release Assets
    needs: [validate, test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          # Remove 'v' prefix for version number
          VERSION_NUM="${VERSION#v}"

          # Update version in pyproject.toml
          sed -i "s/version = \"[^\"]*\"/version = \"$VERSION_NUM\"/" pyproject.toml

          # Verify the change
          grep "version = \"$VERSION_NUM\"" pyproject.toml

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          python -m twine check dist/*

          # Verify package contents
          pip install dist/*.whl
          python -c "import ocode_python; print(f'Package version: {ocode_python.__version__ if hasattr(ocode_python, '__version__') else 'unknown'}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ needs.validate.outputs.version }}
          path: dist/
          retention-days: 90

  generate-changelog:
    name: Generate Changelog
    needs: [validate]
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1)

          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            echo "Generating changelog from $PREV_TAG to $VERSION"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse "${PREV_TAG}..HEAD")
          fi

          # Create changelog
          CHANGELOG="## Changes in $VERSION\n\n$COMMITS"

          # Handle multiline output for GitHub Actions
          {
            echo 'changelog<<EOF'
            echo -e "$CHANGELOG"
            echo EOF
          } >> $GITHUB_OUTPUT

  publish-pypi:
    name: Publish to PyPI
    needs: [validate, build]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.validate.outputs.environment }}
      url: ${{ steps.pypi.outputs.url }}

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate.outputs.version }}
          path: dist/

      - name: Publish to Test PyPI
        if: needs.validate.outputs.environment == 'test'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Publish to PyPI
        if: needs.validate.outputs.environment == 'production'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Set output URL
        id: pypi
        run: |
          if [[ "${{ needs.validate.outputs.environment }}" == "test" ]]; then
            echo "url=https://test.pypi.org/project/ocode/" >> $GITHUB_OUTPUT
          else
            echo "url=https://pypi.org/project/ocode/" >> $GITHUB_OUTPUT
          fi

  create-release:
    name: Create GitHub Release
    needs: [validate, generate-changelog, publish-pypi]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate.outputs.version }}
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body: |
            ${{ needs.generate-changelog.outputs.changelog }}

            ## Installation

            ```bash
            pip install ocode==${{ needs.validate.outputs.version }}
            ```

            ## PyPI

            This release is available on PyPI: https://pypi.org/project/ocode/${{ needs.validate.outputs.version }}/
          files: |
            dist/*
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    name: Notify Success
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Success notification
        run: |
          echo "‚úÖ Successfully released ${{ needs.validate.outputs.version }}"
          echo "üì¶ PyPI: https://pypi.org/project/ocode/"
          echo "üöÄ GitHub: https://github.com/haasonsaas/ocode/releases/tag/${{ needs.validate.outputs.version }}"

  notify-failure:
    name: Notify Failure
    needs: [validate, test, build, publish-pypi, create-release]
    runs-on: ubuntu-latest
    if: failure()

    steps:
      - name: Failure notification
        run: |
          echo "‚ùå Release ${{ needs.validate.outputs.version }} failed"
          echo "Please check the workflow logs for details."
          exit 1
